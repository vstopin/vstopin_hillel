//'number' + 3 + 3
let x = 'number' + 3 + 3; // між рядком 'number' і числом 3 виконується конкатенація, тому отримуємо 'number 3'. далі по такому ж принципу отримуємо 'number33'
console.log(x);


//null + 3
let y = null + 3; //null при математичних операціях перетворюється на 0 в js (0+3=3), тому результатом буде 3
console.log(y);


//5 && "qwerty"
let x = 5 && "qwerty"; //5 - це true, так як будь яке значення окрім 0 є true. "qwerty" також true, оскільки рядок не порожній. && повертає останнє значення true, одже результат - qwerty
console.log(x);


//+'40' + +'2' + "hillel";
let y = +'40' + +'2' + "hillel"; //оператор '+' перетворє 40 та 2 на числа, результат 42. далі наступний '+' конкатенує 42 в рядок і додає 'hillel'. результат - 42hillel
console.log(y);


//'10' - 5 === 6;
let x = '10' - 5 === 6; // оператор '-' перетворює '10' на число, тому отримаємо 5. далі йде порівняння 5 === 6, і оскільки числа не рівні, отримаємо false
console.log(x);


//true + false
let y = true + false; // так як і true і false можна перетворити в числа (1 та 0 відповідно, 1+0=1), результатом буде 1 
console.log(y);


//'4px' - 3
let x = '4px' - 3;// результатом буде NaN, так як ми не можемо перетворити 4px на число 
console.log(x);


//'4' - 3
let y = '4' - 3; // 4 з рядка перетворюється на число оператором '-', тому результат операції буде 1
console.log(y);


//'6' + 3 ** 0;
let x = '6' + 3 ** 0; // ** - оператор піднесення до ступеня, в операції 3 ** 0 ми отримаємо 1, так як будь яке число піднесене до ступеня 0 буде дорівнювати 1. '61' це рядок, тому + буде виконувати конкатенацію. результат '61'
console.log(x);


//12 / '6'
let y = 12 / '6'; // оператор ділення '/' перетворює рядок '6' на число, тому результатом буде 2
console.log(y);


//'10' + (5 === 6);
let x = '10' + (5 === 6); // результатом 5===6 буде false, так як 6>5. далі додаємо рядок '10'+false, що перетворює false на рядок і отримуємо '10false' 
console.log(x);


//null == ''
let y = null == '';// null є спеціальним типом, а '' - порожній рядок. тому результатом слабкого порівняння == буде false, так як це різні значення
console.log(y);


//3 ** (9 / 3);
let x = 3 ** (9 / 3); //спочатку виконується операція в дужках, 9/3=3. далі 3 ** 3 = 27
console.log(x);


//!!'false' == !!'true'
let y = !!'false' == !!'true'; // обидва рядки 'true' та 'false' є непорожніми, тому при використанні !! будуть перетворені як true (перший ! перетворює 'false' на 'true', і наступний ! теж на 'true'. теж саме і з іншим рядком). при порівнянні true == true отримаємо true 
console.log(y);


//0 || '0' && 1
let x = 0 || '0' && 1; //оператор && має вищий приорітет, тому результатом '0' && 1 буде 1. '0' це значення true (непорожній рядок), в такому разі повертається останній операнд - 1. далі 0 || 1, і так як || (АБО) повертає наступний true операнд, то результатом буде 1. 
console.log(x);


//(+null == false) < 1;
let y = (+null == false) < 1; //+null перетворює значення null на число 0. таким чином отримуємо 0 == false. при слабкому порівнянні '==' 0 та false будуть рівними, тому це true. далі true <1 (true при порівнянні з цілими числами стає 1), тобто 1<1, що дає нам false
console.log(y);


//false && true || true
let x = false && true || true; //порівнюємо спочатку false && true по приорітету. маємо перший операнд false, тому він і повертається. false || true дає true
console.log(x);


//false && (false || true);
let y = false && (false || true); // спочатку операція в дужках false || true дає нам true. далі && повертає перший false, незалежно від того, що йде далі, тому результатом буде false
console.log(y);


//(+null == false) < 1 ** 5; 
let x = (+null == false) < 1 ** 5; // спочатку операція в дужках +null == false (+null перетворюється на 0), 0 == false при слабкому порівнянні дає true. далі маємо true <1 ** 5, підносимо 1 до 5 степеня, що дорівнює 1. вираз виглядає тепер так: true < 1, але так як true припорівнянні з числом стає 1, то отримуємо false, тому що 1 не є меншою за 1 
console.log(x);

